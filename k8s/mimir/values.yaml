mimir:
  replicas:
    distributor: 3
    ingester: 6
    querier: 4
    query_frontend: 3
    store_gateway: 4
    compactor: 2
    ruler: 3
  storage:
    type: s3
  structuredConfig:
    multitenancy_enabled: true
    auth_enabled: true
    server:
      log_level: info
      http_listen_port: 8080
      grpc_listen_port: 9095
      http_tls_config:
        cert_file: /etc/mimir/tls/tls.crt
        key_file: /etc/mimir/tls/tls.key
        client_auth_type: RequireAndVerifyClientCert
        client_ca_file: /etc/mimir/tls/ca.crt
      grpc_tls_config:
        cert_file: /etc/mimir/tls/tls.crt
        key_file: /etc/mimir/tls/tls.key
        client_auth_type: RequireAndVerifyClientCert
        client_ca_file: /etc/mimir/tls/ca.crt
    distributor:
      ring:
        kvstore:
          store: memberlist
        replication_factor: 3
      remote_timeout: 10s
    ingester:
      lifecycler:
        ring:
          kvstore:
            store: memberlist
          replication_factor: 3
        join_after: 0s
        observe_period: 5s
        final_sleep: 0s
      wal:
        enabled: true
        dir: /var/mimir/wal
      concurrent_flushes: 128
      max_transfer_retries: 0
    compactor:
      working_directory: /data
      sharding_enabled: true
      sharding_ring:
        replication_factor: 3
      compaction_interval: 15m
      delete_request_cancel_period: 24h
      retention_enabled: true
      retention_delete_delay: 4h
      downsampling:
        enabled: true
        resolutions: ["5m", "1h"]
    store_gateway:
      sharding_enabled: true
      sharding_ring:
        replication_factor: 3
      bucket_store:
        sync_dir: /var/mimir/store-gateway
        index_cache:
          backend: memcached
          memcached_client:
            addresses: ["dnssrvnoa+_tcp.mimir-index-cache.monitoring.svc.cluster.local"]
            timeout: 500ms
        chunks_cache:
          backend: memcached
          memcached_client:
            addresses: ["dnssrvnoa+_tcp.mimir-index-cache.monitoring.svc.cluster.local"]
    query_range:
      split_queries_by_interval: 24h
      align_queries_with_step: true
      cache_results: true
      results_cache:
        cache:
          backend: memcached
          memcached_client:
            addresses: ["dnssrvnoa+_tcp.mimir-query-cache.monitoring.svc.cluster.local"]
            service: memcached-client
            timeout: 500ms
    frontend_worker:
      match_max_concurrent: true
      parallelism: 16
    frontend:
      log_queries_longer_than: 10s
      query_result_response_cache_max_bytes: 1048576
      compress_http_responses: true
      max_outstanding_per_tenant: 64
    query_scheduler:
      max_outstanding_requests_per_tenant: 200
    querier:
      max_concurrent: 16
      query_ingesters_within: 12h
      store_gateway_addresses: []
      store_gateway_client:
        tls_config:
          insecure_skip_verify: false
          cert_file: /etc/mimir/tls/tls.crt
          key_file: /etc/mimir/tls/tls.key
          ca_file: /etc/mimir/tls/ca.crt
    ruler:
      enable_api: true
      ring:
        kvstore:
          store: memberlist
        replication_factor: 3
      rule_path: /var/mimir/rules
      alertmanager_url: https://alertmanager.monitoring.svc.cluster.local
      alertmanager_client:
        tls_config:
          cert_file: /etc/mimir/tls/tls.crt
          key_file: /etc/mimir/tls/tls.key
          ca_file: /etc/mimir/tls/ca.crt
      query_frontend_address: mimir-query-frontend.monitoring.svc.cluster.local:9095
      poll_interval: 30s
      evaluation_interval: 30s
      ruler_tenant_shuffle_sharding_enabled: true
      ruler_tenant_shuffle_sharding_shards: 3
      storage:
        backend: filesystem
        filesystem:
          dir: /var/mimir/rules
    alertmanager:
      enable_api: true
    runtime_config:
      file: /etc/mimir/runtime/limits.yaml
      reload_period: 10s
    limits_config:
      ingestion_rate: 20000
      ingestion_burst_size: 40000
      max_global_series_per_user: 10000000
      max_series_per_metric: 50000
      max_label_names_per_series: 40
      max_label_value_length: 128
      max_query_parallelism: 16
      max_query_length: 168h
      max_queriers_per_tenant: 2
      max_series_per_query: 5e6
      max_fetched_series_per_query: 5e6
      max_cache_freshness: 10m
      retention_period: 48h
    storage:
      tsdb:
        dir: /var/mimir
      backend: s3
      s3:
        bucket_name: ${S3_BUCKET}
        endpoint: s3.${AWS_REGION}.amazonaws.com
        access_key_id: ${AWS_ACCESS_KEY_ID}
        secret_access_key: ${AWS_SECRET_ACCESS_KEY}
        region: ${AWS_REGION}
        sse:
          type: kms
          kms_key_id: ${KMS_KEY_ID}
        insecure: false
        http:
          idle_conn_timeout: 90s
          tls_config:
            insecure_skip_verify: false
        multipart:
          max_part_size: 67108864
          upload_concurrency: 50
    alertmanager_storage:
      backend: s3
      s3:
        bucket_name: ${S3_BUCKET}
        endpoint: s3.${AWS_REGION}.amazonaws.com
        access_key_id: ${AWS_ACCESS_KEY_ID}
        secret_access_key: ${AWS_SECRET_ACCESS_KEY}
        sse:
          type: kms
          kms_key_id: ${KMS_KEY_ID}
        region: ${AWS_REGION}
    overrides_exporter:
      enabled: true
      ring:
        kvstore:
          store: memberlist
  runtimeConfig:
    enabled: true
    name: mimir-runtime-config
    key: limits.yaml
  ruler:
    enabled: true
    extraVolumes:
      - name: ruler-rules
        configMap:
          name: mimir-ruler-rules
    extraVolumeMounts:
      - name: ruler-rules
        mountPath: /var/mimir/rules
        readOnly: true
  ingester:
    zoneAwareReplication:
      enabled: true
  serviceAccount:
    create: true
    annotations:
      eks.amazonaws.com/role-arn: "${MIMIR_DISTRIBUTOR_ROLE_ARN}"
  distributor:
    serviceAccount:
      annotations:
        eks.amazonaws.com/role-arn: "${MIMIR_DISTRIBUTOR_ROLE_ARN}"
  querier:
    serviceAccount:
      annotations:
        eks.amazonaws.com/role-arn: "${MIMIR_QUERIER_ROLE_ARN}"
  queryFrontend:
    serviceAccount:
      annotations:
        eks.amazonaws.com/role-arn: "${MIMIR_QUERY_FRONTEND_ROLE_ARN}"
  storeGateway:
    serviceAccount:
      annotations:
        eks.amazonaws.com/role-arn: "${MIMIR_STORE_GATEWAY_ROLE_ARN}"
  compactor:
    serviceAccount:
      annotations:
        eks.amazonaws.com/role-arn: "${MIMIR_COMPACTOR_ROLE_ARN}"
  rulerComponent:
    serviceAccount:
      annotations:
        eks.amazonaws.com/role-arn: "${MIMIR_RULER_ROLE_ARN}"
  alertmanager:
    enabled: false
gateway:
  enabled: true
  replicas: 2
  ingress:
    enabled: true
    ingressClassName: alb
    annotations:
      kubernetes.io/ingress.class: alb
      alb.ingress.kubernetes.io/scheme: internet-facing
      alb.ingress.kubernetes.io/backend-protocol: HTTPS
      alb.ingress.kubernetes.io/listen-ports: '[{"HTTPS":443}]'
      alb.ingress.kubernetes.io/actions.ssl-redirect: >
        {"type":"redirect","redirectConfig":{"protocol":"HTTPS","port":"443","statusCode":"HTTP_301"}}
      alb.ingress.kubernetes.io/auth-type: oidc
      alb.ingress.kubernetes.io/auth-on-unauthenticated-request: authenticate
      alb.ingress.kubernetes.io/auth-session-cookie: mimir-auth
      alb.ingress.kubernetes.io/auth-session-timeout: "3600"
      alb.ingress.kubernetes.io/auth-scope: "openid profile email"
      alb.ingress.kubernetes.io/auth-oidc-issuer: ${OIDC_ISSUER}
      alb.ingress.kubernetes.io/auth-oidc-token-endpoint: ${OIDC_ISSUER}/token
      alb.ingress.kubernetes.io/auth-oidc-user-info-endpoint: ${OIDC_ISSUER}/userinfo
      alb.ingress.kubernetes.io/auth-oidc-client-id: ${OIDC_CLIENT_ID}
      alb.ingress.kubernetes.io/auth-oidc-client-secret: ${OIDC_CLIENT_SECRET}
    hosts:
      - host: mimir.${BASE_DOMAIN}
        paths:
          - path: /
            pathType: Prefix
    tls:
      - secretName: mimir-gateway-tls
        hosts:
          - mimir.${BASE_DOMAIN}
  nginxConfig:
    httpSnippet: |
      map $http_x_scope_orgid $scope_orgid {
        default $http_x_scope_orgid;
        "" $http_x_tenant_id;
      }
    serverSnippet: |
      if ($scope_orgid = "") { return 403; }
      proxy_set_header X-Scope-OrgID $scope_orgid;
      proxy_set_header X-Forwarded-Proto https;
  service:
    ports:
      http:
        port: 443
        targetPort: 8080
memcached:
  index:
    enabled: false
  frontend:
    enabled: false
global:
  extraEnv:
    - name: AWS_REGION
      value: ${AWS_REGION}
    - name: TENANT_ID
      value: "${TENANT_ID}"
  extraEnvFrom:
    - secretRef:
        name: mimir-aws
  extraVolumes:
    - name: tls-certs
      secret:
        secretName: mimir-mtls
    - name: runtime-config
      configMap:
        name: mimir-runtime-config
  extraVolumeMounts:
    - name: tls-certs
      mountPath: /etc/mimir/tls
      readOnly: true
    - name: runtime-config
      mountPath: /etc/mimir/runtime
      readOnly: true
ingress:
  enabled: false
ruler:
  enabled: true
  ruleNamespaceSelector:
    matchLabels:
      monitoring.grafana.com/rules-tenant: shared
